// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: website.proto

package website

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebService_TestPostAPI_FullMethodName = "/services.website.v1.WebService/TestPostAPI"
	WebService_TestGetAPI_FullMethodName  = "/services.website.v1.WebService/TestGetAPI"
)

// WebServiceClient is the client API for WebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebServiceClient interface {
	// TestPostAPI
	//
	// | Field ID    | Name      | Type                                                       | Required                  |
	// | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
	// | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	TestPostAPI(ctx context.Context, in *TestPostAPIRequest, opts ...grpc.CallOption) (*TestPostAPIResponse, error)
	// TestGetAPI
	//
	// | Field ID    | Name      | Type                                                       | Required                  |
	// | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
	// | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	TestGetAPI(ctx context.Context, in *TestGetAPIRequest, opts ...grpc.CallOption) (*TestGetAPIResponse, error)
}

type webServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebServiceClient(cc grpc.ClientConnInterface) WebServiceClient {
	return &webServiceClient{cc}
}

func (c *webServiceClient) TestPostAPI(ctx context.Context, in *TestPostAPIRequest, opts ...grpc.CallOption) (*TestPostAPIResponse, error) {
	out := new(TestPostAPIResponse)
	err := c.cc.Invoke(ctx, WebService_TestPostAPI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) TestGetAPI(ctx context.Context, in *TestGetAPIRequest, opts ...grpc.CallOption) (*TestGetAPIResponse, error) {
	out := new(TestGetAPIResponse)
	err := c.cc.Invoke(ctx, WebService_TestGetAPI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServiceServer is the server API for WebService service.
// All implementations must embed UnimplementedWebServiceServer
// for forward compatibility
type WebServiceServer interface {
	// TestPostAPI
	//
	// | Field ID    | Name      | Type                                                       | Required                  |
	// | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
	// | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	TestPostAPI(context.Context, *TestPostAPIRequest) (*TestPostAPIResponse, error)
	// TestGetAPI
	//
	// | Field ID    | Name      | Type                                                       | Required                  |
	// | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
	// | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	TestGetAPI(context.Context, *TestGetAPIRequest) (*TestGetAPIResponse, error)
	mustEmbedUnimplementedWebServiceServer()
}

// UnimplementedWebServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebServiceServer struct {
}

func (UnimplementedWebServiceServer) TestPostAPI(context.Context, *TestPostAPIRequest) (*TestPostAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestPostAPI not implemented")
}
func (UnimplementedWebServiceServer) TestGetAPI(context.Context, *TestGetAPIRequest) (*TestGetAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestGetAPI not implemented")
}
func (UnimplementedWebServiceServer) mustEmbedUnimplementedWebServiceServer() {}

// UnsafeWebServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServiceServer will
// result in compilation errors.
type UnsafeWebServiceServer interface {
	mustEmbedUnimplementedWebServiceServer()
}

func RegisterWebServiceServer(s grpc.ServiceRegistrar, srv WebServiceServer) {
	s.RegisterService(&WebService_ServiceDesc, srv)
}

func _WebService_TestPostAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestPostAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).TestPostAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_TestPostAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).TestPostAPI(ctx, req.(*TestPostAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_TestGetAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestGetAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).TestGetAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_TestGetAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).TestGetAPI(ctx, req.(*TestGetAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebService_ServiceDesc is the grpc.ServiceDesc for WebService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.website.v1.WebService",
	HandlerType: (*WebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestPostAPI",
			Handler:    _WebService_TestPostAPI_Handler,
		},
		{
			MethodName: "TestGetAPI",
			Handler:    _WebService_TestGetAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "website.proto",
}
