// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: microservice/v1/service_info.proto

package microservice

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceInfoService_SyncServiceInfo_FullMethodName       = "/components.microservice.v1.ServiceInfoService/SyncServiceInfo"
	ServiceInfoService_GetServicePermissions_FullMethodName = "/components.microservice.v1.ServiceInfoService/GetServicePermissions"
)

// ServiceInfoServiceClient is the client API for ServiceInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceInfoServiceClient interface {
	SyncServiceInfo(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	GetServicePermissions(ctx context.Context, in *GetServicePermissionsRequest, opts ...grpc.CallOption) (*ServiceInfo, error)
}

type serviceInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceInfoServiceClient(cc grpc.ClientConnInterface) ServiceInfoServiceClient {
	return &serviceInfoServiceClient{cc}
}

func (c *serviceInfoServiceClient) SyncServiceInfo(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ServiceInfoService_SyncServiceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInfoServiceClient) GetServicePermissions(ctx context.Context, in *GetServicePermissionsRequest, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, ServiceInfoService_GetServicePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceInfoServiceServer is the server API for ServiceInfoService service.
// All implementations must embed UnimplementedServiceInfoServiceServer
// for forward compatibility
type ServiceInfoServiceServer interface {
	SyncServiceInfo(context.Context, *ServiceInfo) (*empty.Empty, error)
	GetServicePermissions(context.Context, *GetServicePermissionsRequest) (*ServiceInfo, error)
	mustEmbedUnimplementedServiceInfoServiceServer()
}

// UnimplementedServiceInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceInfoServiceServer struct {
}

func (UnimplementedServiceInfoServiceServer) SyncServiceInfo(context.Context, *ServiceInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncServiceInfo not implemented")
}
func (UnimplementedServiceInfoServiceServer) GetServicePermissions(context.Context, *GetServicePermissionsRequest) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicePermissions not implemented")
}
func (UnimplementedServiceInfoServiceServer) mustEmbedUnimplementedServiceInfoServiceServer() {}

// UnsafeServiceInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceInfoServiceServer will
// result in compilation errors.
type UnsafeServiceInfoServiceServer interface {
	mustEmbedUnimplementedServiceInfoServiceServer()
}

func RegisterServiceInfoServiceServer(s grpc.ServiceRegistrar, srv ServiceInfoServiceServer) {
	s.RegisterService(&ServiceInfoService_ServiceDesc, srv)
}

func _ServiceInfoService_SyncServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServiceServer).SyncServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInfoService_SyncServiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServiceServer).SyncServiceInfo(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInfoService_GetServicePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServiceServer).GetServicePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInfoService_GetServicePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServiceServer).GetServicePermissions(ctx, req.(*GetServicePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceInfoService_ServiceDesc is the grpc.ServiceDesc for ServiceInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "components.microservice.v1.ServiceInfoService",
	HandlerType: (*ServiceInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncServiceInfo",
			Handler:    _ServiceInfoService_SyncServiceInfo_Handler,
		},
		{
			MethodName: "GetServicePermissions",
			Handler:    _ServiceInfoService_GetServicePermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservice/v1/service_info.proto",
}
